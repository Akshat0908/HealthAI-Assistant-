{"ast":null,"code":"import axios from 'axios';\nimport { ENDPOINTS } from '../config/api';\nimport { subDays, format } from 'date-fns';\nconst generateSampleVitals = () => {\n  const types = ['Heart Rate', 'Blood Pressure'];\n  const vitals = [];\n  const today = new Date();\n  for (let i = 0; i < 14; i++) {\n    const date = subDays(today, 13 - i);\n    types.forEach(type => {\n      let value;\n      switch (type) {\n        case 'Blood Pressure':\n          value = `${Math.floor(Math.random() * 40 + 100)}/${Math.floor(Math.random() * 40 + 60)}`;\n          break;\n        case 'Heart Rate':\n          value = Math.floor(Math.random() * 40 + 60).toString();\n          break;\n        default:\n          value = Math.floor(Math.random() * 100).toString();\n      }\n      vitals.push({\n        id: Date.now() + Math.random(),\n        date: format(date, 'yyyy-MM-dd'),\n        type: type,\n        value: value\n      });\n    });\n  }\n  return vitals;\n};\nconst api = {\n  sendChatMessage: message => axios.post(ENDPOINTS.CHAT, {\n    messages: [{\n      role: \"user\",\n      content: message\n    }],\n    model: \"Phi-3-mini-4k-instruct\"\n  }),\n  getAppointments: () => {\n    const appointments = JSON.parse(localStorage.getItem('appointments') || '[]');\n    return Promise.resolve({\n      data: appointments\n    });\n  },\n  createAppointment: appointmentData => {\n    const appointments = JSON.parse(localStorage.getItem('appointments') || '[]');\n    const newAppointment = {\n      ...appointmentData,\n      id: Date.now()\n    };\n    appointments.push(newAppointment);\n    localStorage.setItem('appointments', JSON.stringify(appointments));\n    return Promise.resolve({\n      data: newAppointment\n    });\n  },\n  getVitals: () => {\n    let vitals = JSON.parse(localStorage.getItem('vitals') || '[]');\n    if (vitals.length === 0) {\n      vitals = generateSampleVitals();\n      localStorage.setItem('vitals', JSON.stringify(vitals));\n    }\n    return Promise.resolve({\n      data: vitals\n    });\n  },\n  addVital: vitalData => {\n    const vitals = JSON.parse(localStorage.getItem('vitals') || '[]');\n    const newVital = {\n      ...vitalData,\n      id: Date.now(),\n      date: new Date().toISOString()\n    };\n    vitals.push(newVital);\n    localStorage.setItem('vitals', JSON.stringify(vitals));\n    return Promise.resolve({\n      data: newVital\n    });\n  },\n  deleteVital: id => {\n    const vitals = JSON.parse(localStorage.getItem('vitals') || '[]');\n    const updatedVitals = vitals.filter(vital => vital.id !== id);\n    localStorage.setItem('vitals', JSON.stringify(updatedVitals));\n    return Promise.resolve({\n      data: id\n    });\n  },\n  getHealthTips: () => {\n    // For now, we'll return static tips. In a real app, this would be an API call.\n    return Promise.resolve({\n      data: [\"Stay hydrated! Aim for 8 glasses of water a day.\", \"Take a 5-minute break every hour to stretch and move around.\", \"Incorporate colorful fruits and vegetables into your meals for a nutrient boost.\", \"Practice deep breathing exercises to reduce stress and improve focus.\", \"Aim for 7-9 hours of sleep each night for optimal health.\"]\n    });\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","ENDPOINTS","subDays","format","generateSampleVitals","types","vitals","today","Date","i","date","forEach","type","value","Math","floor","random","toString","push","id","now","api","sendChatMessage","message","post","CHAT","messages","role","content","model","getAppointments","appointments","JSON","parse","localStorage","getItem","Promise","resolve","data","createAppointment","appointmentData","newAppointment","setItem","stringify","getVitals","length","addVital","vitalData","newVital","toISOString","deleteVital","updatedVitals","filter","vital","getHealthTips"],"sources":["/Users/akshatagrawal/Desktop/healthcare/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\nimport { ENDPOINTS } from '../config/api';\nimport { subDays, format } from 'date-fns';\n\nconst generateSampleVitals = () => {\n  const types = ['Heart Rate', 'Blood Pressure'];\n  const vitals = [];\n  const today = new Date();\n\n  for (let i = 0; i < 14; i++) {\n    const date = subDays(today, 13 - i);\n    types.forEach(type => {\n      let value;\n      switch(type) {\n        case 'Blood Pressure':\n          value = `${Math.floor(Math.random() * 40 + 100)}/${Math.floor(Math.random() * 40 + 60)}`;\n          break;\n        case 'Heart Rate':\n          value = Math.floor(Math.random() * 40 + 60).toString();\n          break;\n        default:\n          value = Math.floor(Math.random() * 100).toString();\n      }\n      vitals.push({\n        id: Date.now() + Math.random(),\n        date: format(date, 'yyyy-MM-dd'),\n        type: type,\n        value: value\n      });\n    });\n  }\n  return vitals;\n};\n\nconst api = {\n  sendChatMessage: (message) => axios.post(ENDPOINTS.CHAT, { messages: [{ role: \"user\", content: message }], model: \"Phi-3-mini-4k-instruct\" }),\n  \n  getAppointments: () => {\n    const appointments = JSON.parse(localStorage.getItem('appointments') || '[]');\n    return Promise.resolve({ data: appointments });\n  },\n  \n  createAppointment: (appointmentData) => {\n    const appointments = JSON.parse(localStorage.getItem('appointments') || '[]');\n    const newAppointment = { ...appointmentData, id: Date.now() };\n    appointments.push(newAppointment);\n    localStorage.setItem('appointments', JSON.stringify(appointments));\n    return Promise.resolve({ data: newAppointment });\n  },\n  \n  getVitals: () => {\n    let vitals = JSON.parse(localStorage.getItem('vitals') || '[]');\n    if (vitals.length === 0) {\n      vitals = generateSampleVitals();\n      localStorage.setItem('vitals', JSON.stringify(vitals));\n    }\n    return Promise.resolve({ data: vitals });\n  },\n  \n  addVital: (vitalData) => {\n    const vitals = JSON.parse(localStorage.getItem('vitals') || '[]');\n    const newVital = { ...vitalData, id: Date.now(), date: new Date().toISOString() };\n    vitals.push(newVital);\n    localStorage.setItem('vitals', JSON.stringify(vitals));\n    return Promise.resolve({ data: newVital });\n  },\n  \n  deleteVital: (id) => {\n    const vitals = JSON.parse(localStorage.getItem('vitals') || '[]');\n    const updatedVitals = vitals.filter(vital => vital.id !== id);\n    localStorage.setItem('vitals', JSON.stringify(updatedVitals));\n    return Promise.resolve({ data: id });\n  },\n  \n  getHealthTips: () => {\n    // For now, we'll return static tips. In a real app, this would be an API call.\n    return Promise.resolve({\n      data: [\n        \"Stay hydrated! Aim for 8 glasses of water a day.\",\n        \"Take a 5-minute break every hour to stretch and move around.\",\n        \"Incorporate colorful fruits and vegetables into your meals for a nutrient boost.\",\n        \"Practice deep breathing exercises to reduce stress and improve focus.\",\n        \"Aim for 7-9 hours of sleep each night for optimal health.\",\n      ]\n    });\n  },\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}